// Mocks generated by Mockito 5.4.6 from annotations
// in bookfinder/test/presentation/bloc/book_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bookfinder/data/datasources/book_local_data_source.dart' as _i4;
import 'package:bookfinder/data/datasources/book_remote_data_source.dart'
    as _i3;
import 'package:bookfinder/data/repositories/book_repository_impl.dart' as _i8;
import 'package:bookfinder/domain/entities/book.dart' as _i7;
import 'package:bookfinder/domain/repositories/book_repository.dart' as _i2;
import 'package:bookfinder/domain/usecases/search_books.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBookRepository_0 extends _i1.SmartFake
    implements _i2.BookRepository {
  _FakeBookRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBookRemoteDataSource_1 extends _i1.SmartFake
    implements _i3.BookRemoteDataSource {
  _FakeBookRemoteDataSource_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBookLocalDataSource_2 extends _i1.SmartFake
    implements _i4.BookLocalDataSource {
  _FakeBookLocalDataSource_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SearchBooks].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchBooks extends _i1.Mock implements _i5.SearchBooks {
  MockSearchBooks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeBookRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.BookRepository);

  @override
  _i6.Future<List<_i7.Book>> call(String? query, int? page) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query, page]),
            returnValue: _i6.Future<List<_i7.Book>>.value(<_i7.Book>[]),
          )
          as _i6.Future<List<_i7.Book>>);
}

/// A class which mocks [BookRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepositoryImpl extends _i1.Mock
    implements _i8.BookRepositoryImpl {
  MockBookRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.BookRemoteDataSource get remote =>
      (super.noSuchMethod(
            Invocation.getter(#remote),
            returnValue: _FakeBookRemoteDataSource_1(
              this,
              Invocation.getter(#remote),
            ),
          )
          as _i3.BookRemoteDataSource);

  @override
  _i4.BookLocalDataSource get local =>
      (super.noSuchMethod(
            Invocation.getter(#local),
            returnValue: _FakeBookLocalDataSource_2(
              this,
              Invocation.getter(#local),
            ),
          )
          as _i4.BookLocalDataSource);

  @override
  _i6.Future<List<_i7.Book>> searchBooks(String? query, int? page) =>
      (super.noSuchMethod(
            Invocation.method(#searchBooks, [query, page]),
            returnValue: _i6.Future<List<_i7.Book>>.value(<_i7.Book>[]),
          )
          as _i6.Future<List<_i7.Book>>);

  @override
  _i6.Future<void> storeBook(_i7.Book? book) =>
      (super.noSuchMethod(
            Invocation.method(#storeBook, [book]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i7.Book>> getBooks() =>
      (super.noSuchMethod(
            Invocation.method(#getBooks, []),
            returnValue: _i6.Future<List<_i7.Book>>.value(<_i7.Book>[]),
          )
          as _i6.Future<List<_i7.Book>>);
}
